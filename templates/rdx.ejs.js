/* eslint-disable */
// Necessary to disable esLint for some stuff which would require too much code to fix (like last commas in objects)
<%
// List of props used in the template
var Name = props.Name
var actions = props.actions
var initialState = props.initialState
%>
<% function capitalize(string) {return string.charAt(0).toUpperCase() + string.slice(1)} %>

import { createReducer, createActions } from 'reduxsauce'
import Immutable from 'seamless-immutable'

/* ------------- Types and Action Creators ------------- */

let MainTypes = {}
let MainCreators = {}

/* AUTOGENERATED BLOC START */
let createdActions
<% for (let action of actions) { %>
  createdActions = createActions({
    <%= action.name %>Request: <%- JSON.stringify(action.args) %>,
    <%= action.name %>Success: ["data"],
    <%= action.name %>Failure: ["error"],
  })

  MainTypes = {...createdActions.Types, ...MainTypes}
  MainCreators = {...createdActions.Creators, ...MainCreators}
<% } %>

/* AUTOGENERATED BLOC END */
export const <%- Name %>Types = MainTypes
export default MainCreators


/* ------------- Initial State ------------- */

export const INITIAL_STATE = Immutable(<%- initialState %>)

/* ------------- Reducers ------------- */

const reducers = {}
/* AUTOGENERATED BLOC START */

<% for (let action of actions) { %>
  export const <%- action.name %>Request = state => state.merge({ doing<%- action.Name %>: true })
  export const <%- action.name %>Failure = (state, action) => {
    return state.merge({
      doing<%- action.Name %>: false,
      error<%- action.Name %>: action.error || true,
    })
  }
  export const <%- action.name %>Success = (state, action) => {
    let statusState = {
      doing<%- action.Name %>: false,
      done<%- action.Name %> : true,
      error<%- action.Name %>: null,
    }

    let propState = {
    <% if(action.res){ for(let prop of action.res) { %>
        <%- prop %>: action.data.<%- prop %>,
    <% }} %>
    }

    return state.merge({...statusState, ...propState})
  }

  reducers = {
    [<%- Name %>Types.<%- action.NAME %>_REQUEST]: <%- action.name %>Request,
    [<%- Name %>Types.<%- action.NAME %>_SUCCESS]: <%- action.name %>Success,
    [<%- Name %>Types.<%- action.NAME %>_FAILURE]: <%- action.name %>Failure,
    ...reducers
  }
<% } %>

/* AUTOGENERATED BLOC END */

/* ------------- Hookup Reducers To Types ------------- */
export const reducer = createReducer(INITIAL_STATE, reducers)
